# =================================================================
# Corner League Media - Docker Development Environment Template
# =================================================================
# Copy this file to .env.docker and update the values for your Docker environment
#
# This configuration is optimized for Docker Compose development
# with container networking and service discovery
# =================================================================

# =================================================================
# ENVIRONMENT CONFIGURATION
# =================================================================
ENVIRONMENT=development
DEBUG=true

# =================================================================
# DATABASE CONFIGURATION - DOCKER
# =================================================================

# PostgreSQL Database (Docker internal networking)
DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sportsdb
TEST_DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sportsdb_test

# PostgreSQL Container Settings
POSTGRES_DB=sportsdb
POSTGRES_USER=postgres
POSTGRES_PASSWORD=postgres

# Database Performance Settings
DATABASE_ECHO=false
DATABASE_POOL_SIZE=10
DATABASE_MAX_OVERFLOW=20
DATABASE_POOL_TIMEOUT=30
DATABASE_POOL_RECYCLE=3600

# =================================================================
# REDIS CONFIGURATION - DOCKER
# =================================================================

# Redis Connection (Docker internal networking)
REDIS_URL=redis://redis:6379/0
REDIS_PASSWORD=
REDIS_DB=0
REDIS_MAX_CONNECTIONS=100

# Redis Container Settings
REDIS_MAX_MEMORY=256mb
REDIS_MAXMEMORY_POLICY=allkeys-lru

# =================================================================
# API CONFIGURATION - DOCKER
# =================================================================

# API Server Settings (container networking)
API_HOST=0.0.0.0
API_PORT=8000
SECRET_KEY=docker-dev-secret-key-change-in-production-min-32-chars-long
JWT_ALGORITHM=HS256
JWT_EXPIRE_MINUTES=1440
JWT_SECRET_KEY=docker-dev-jwt-secret-change-in-production

# CORS Configuration (Docker host access)
ALLOWED_ORIGIN=http://localhost:8080,http://localhost:3000,http://localhost,http://frontend:8080
CORS_ALLOW_CREDENTIALS=true
CORS_ALLOW_METHODS=GET,POST,PUT,DELETE,OPTIONS
CORS_ALLOW_HEADERS=*

# =================================================================
# CLERK AUTHENTICATION CONFIGURATION
# =================================================================
# Get these from your Clerk Dashboard: https://dashboard.clerk.dev
CLERK_PUBLISHABLE_KEY=pk_test_your-clerk-publishable-key-here
CLERK_SECRET_KEY=sk_test_your-clerk-secret-key-here
CLERK_JWT_ISSUER=https://your-clerk-domain.clerk.accounts.dev
CLERK_JWKS_URL=https://your-clerk-domain.clerk.accounts.dev/.well-known/jwks.json

# Frontend Clerk Configuration (must match backend)
VITE_CLERK_PUBLISHABLE_KEY=pk_test_your-clerk-publishable-key-here

# =================================================================
# AI CONFIGURATION
# =================================================================

# DeepSeek AI Configuration
DEEPSEEK_API_KEY=sk-your-deepseek-api-key-here
DEEPSEEK_BASE_URL=https://api.deepseek.com/v1
AI_MODEL=deepseek-chat

# OpenAI Configuration (alternative)
OPENAI_API_KEY=sk-your-openai-api-key-here
OPENAI_API_BASE_URL=https://api.openai.com/v1

# AI Request Settings
AI_REQUEST_TIMEOUT=30
AI_MAX_RETRIES=3

# =================================================================
# CRAWLER/PROXY CONFIGURATION
# =================================================================
# For web scraping functionality
EVOMI_PROXY_USER=your-proxy-username
EVOMI_PROXY_PASS=your-proxy-password

# =================================================================
# FRONTEND CONFIGURATION - DOCKER
# =================================================================

# Frontend API URL (Docker container to container)
VITE_API_URL=http://backend:8000

# Frontend External API URL (browser to host)
VITE_API_URL_EXTERNAL=http://localhost:8000

# App Configuration
VITE_APP_NAME=Corner League Media
VITE_APP_VERSION=1.0.0

# =================================================================
# OBSERVABILITY CONFIGURATION - DOCKER
# =================================================================

# OpenTelemetry Configuration (Docker service names)
OTEL_EXPORTER_OTLP_ENDPOINT=http://otel-collector:4318
OTEL_EXPORTER_OTLP_TRACES_ENDPOINT=http://otel-collector:4318/v1/traces
OTEL_EXPORTER_OTLP_METRICS_ENDPOINT=http://otel-collector:4318/v1/metrics
OTEL_EXPORTER_OTLP_LOGS_ENDPOINT=http://otel-collector:4318/v1/logs
OTEL_SERVICE_NAME=corner-league-media
OTEL_SERVICE_VERSION=1.0.0
OTEL_RESOURCE_ATTRIBUTES=service.name=corner-league-media,service.version=1.0.0,deployment.environment=development

# Jaeger Configuration (Docker internal)
JAEGER_ENDPOINT=http://jaeger:14268/api/traces
JAEGER_AGENT_HOST=jaeger
JAEGER_AGENT_PORT=6831

# =================================================================
# MONITORING & DASHBOARDS - DOCKER
# =================================================================

# Grafana Configuration
GRAFANA_PASSWORD=secure-grafana-password-change-me
GRAFANA_USER=admin

# Prometheus Configuration
PROMETHEUS_ENABLED=true
METRICS_ENDPOINT=/metrics

# =================================================================
# DEVELOPMENT TOOLS - DOCKER
# =================================================================

# Database Administration (Adminer)
ADMINER_ENABLED=true
ADMINER_PORT=8081
ADMINER_DEFAULT_SERVER=postgres
ADMINER_DESIGN=lucas-sandery

# Redis Administration (Redis Commander)
REDIS_COMMANDER_ENABLED=true
REDIS_COMMANDER_PORT=8082
REDIS_COMMANDER_USER=admin
REDIS_COMMANDER_PASSWORD=admin

# =================================================================
# SEARCH CONFIGURATION
# =================================================================
SEARCH_BACKEND=postgresql
SEARCH_USE_ELASTICSEARCH=false

# =================================================================
# FEATURE FLAGS
# =================================================================
ENABLE_AI_SUMMARIZATION=false
ENABLE_TRENDING_DISCOVERY=false
ENABLE_QUALITY_ENFORCEMENT=false
ENABLE_REAL_TIME_UPDATES=false
ENABLE_CACHING=true

# =================================================================
# LOGGING CONFIGURATION - DOCKER
# =================================================================

# Logging Configuration
LOG_LEVEL=INFO
LOG_FORMAT=json
ENABLE_SQL_LOGGING=false

# =================================================================
# SECURITY CONFIGURATION - DOCKER
# =================================================================

# Security Headers
ENABLE_SECURITY_HEADERS=true
ENABLE_RATE_LIMITING=true
ENABLE_REQUEST_ID=true

# Session Configuration
SESSION_COOKIE_SECURE=false
SESSION_COOKIE_HTTPONLY=true
SESSION_COOKIE_SAMESITE=lax

# =================================================================
# NGINX CONFIGURATION - DOCKER
# =================================================================

# Nginx Proxy Settings
NGINX_WORKER_PROCESSES=auto
NGINX_WORKER_CONNECTIONS=1024
NGINX_CLIENT_MAX_BODY_SIZE=10m

# =================================================================
# DOCKER COMPOSE PROFILES
# =================================================================
# Available profiles:
# - default: Core services (postgres, redis, backend, frontend)
# - monitoring: Add Grafana and Prometheus
# - observability: Add Jaeger and OpenTelemetry
# - dev-tools: Add Adminer and Redis Commander
# - full: All services

# =================================================================
# PERFORMANCE & SCALING - DOCKER
# =================================================================

# API Rate Limiting
RATE_LIMIT_ENABLED=true
RATE_LIMIT_REQUESTS=100
RATE_LIMIT_WINDOW=60

# Cache Settings
CACHE_TTL=3600
CACHE_PREFIX=corner_league

# Connection Pooling
MAX_CONNECTIONS=100
CONNECTION_TIMEOUT=30

# =================================================================
# HEALTH CHECK CONFIGURATION - DOCKER
# =================================================================

# Health Check Settings
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_TIMEOUT=10
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_START_PERIOD=40

# Service Health Endpoints
POSTGRES_HEALTH_CHECK=pg_isready -U postgres -d sportsdb
REDIS_HEALTH_CHECK=redis-cli ping
BACKEND_HEALTH_CHECK=python -c "import httpx; httpx.get('http://localhost:8000/health', timeout=5)"
FRONTEND_HEALTH_CHECK=wget --no-verbose --tries=1 --spider http://localhost:8080

# =================================================================
# VOLUME CONFIGURATION - DOCKER
# =================================================================

# Volume Settings
POSTGRES_DATA_PATH=./data/postgres
REDIS_DATA_PATH=./data/redis
GRAFANA_DATA_PATH=./data/grafana
PROMETHEUS_DATA_PATH=./data/prometheus
JAEGER_DATA_PATH=./data/jaeger

# =================================================================
# NETWORK CONFIGURATION - DOCKER
# =================================================================

# Docker Network Settings
DOCKER_NETWORK_NAME=corner-league-network
DOCKER_SUBNET=172.20.0.0/16

# =================================================================
# PORT MAPPING - DOCKER TO HOST
# =================================================================

# Service Port Mappings (host:container)
POSTGRES_PORT=5432:5432
REDIS_PORT=6379:6379
BACKEND_PORT=8000:8000
BACKEND_DEBUG_PORT=5678:5678
FRONTEND_PORT=8080:8080
FRONTEND_HMR_PORT=24678:24678
NGINX_HTTP_PORT=80:80
NGINX_HTTPS_PORT=443:443
GRAFANA_PORT=3000:3000
PROMETHEUS_PORT=9090:9090
JAEGER_UI_PORT=16686:16686
JAEGER_COLLECTOR_HTTP_PORT=14268:14268
JAEGER_COLLECTOR_GRPC_PORT=14250:14250
OTEL_GRPC_PORT=4317:4317
OTEL_HTTP_PORT=4318:4318
OTEL_METRICS_PORT=8888:8888
ADMINER_PORT=8081:8080
REDIS_COMMANDER_PORT=8082:8081

# =================================================================
# BACKUP & MAINTENANCE - DOCKER
# =================================================================

# Database Backup
AUTO_BACKUP_ENABLED=false
BACKUP_SCHEDULE=0 2 * * *
BACKUP_RETENTION_DAYS=30
BACKUP_PATH=./backups

# =================================================================
# TROUBLESHOOTING - DOCKER
# =================================================================

# Debug Settings
DOCKER_DEBUG=false
VERBOSE_LOGGING=false
CONTAINER_RESTART_POLICY=unless-stopped

# Resource Limits
POSTGRES_MEMORY_LIMIT=512m
REDIS_MEMORY_LIMIT=256m
BACKEND_MEMORY_LIMIT=1g
FRONTEND_MEMORY_LIMIT=512m
GRAFANA_MEMORY_LIMIT=256m
PROMETHEUS_MEMORY_LIMIT=512m
JAEGER_MEMORY_LIMIT=256m
OTEL_MEMORY_LIMIT=256m

# =================================================================
# DEVELOPMENT WORKFLOW
# =================================================================

# Hot Reload Settings
ENABLE_HOT_RELOAD=true
WATCH_FILES=true
POLLING_ENABLED=true

# Build Settings
BUILD_TARGET=development
USE_CACHE=true
PARALLEL_BUILDS=true