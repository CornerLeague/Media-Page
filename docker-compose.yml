version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: corner-league-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: sportsdb
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: postgres
      POSTGRES_INITDB_ARGS: "--encoding=UTF8 --locale=C"
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d sportsdb"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - corner-league-network

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: corner-league-redis
    restart: unless-stopped
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3
      start_period: 10s
    networks:
      - corner-league-network

  # FastAPI Backend
  backend:
    build:
      context: ./app
      dockerfile: Dockerfile.dev
      target: development
    container_name: corner-league-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
      - "5678:5678"  # Debugger port
    environment:
      - ENVIRONMENT=development
      - DEBUG=true
      - DATABASE_URL=postgresql://postgres:postgres@postgres:5432/sportsdb
      - REDIS_URL=redis://redis:6379/0
      - API_HOST=0.0.0.0
      - API_PORT=8000
      - ALLOWED_ORIGIN=http://localhost:8080,http://localhost:3000,http://localhost
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - WATCHDOG_ENABLED=true
    env_file:
      - .env
    volumes:
      - ./app:/app
      - /app/__pycache__
      - backend_cache:/root/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "python", "-c", "import httpx; httpx.get('http://localhost:8000/health', timeout=5)"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - corner-league-network

  # Frontend Development Server
  frontend:
    image: node:20-alpine
    container_name: corner-league-frontend
    restart: unless-stopped
    working_dir: /app
    ports:
      - "8080:8080"
      - "24678:24678" # Vite HMR port
    environment:
      - NODE_ENV=development
      - VITE_API_URL=http://localhost:8000
      - CHOKIDAR_USEPOLLING=true
      - WATCHPACK_POLLING=true
      - VITE_HMR_PORT=24678
      - VITE_HOST=0.0.0.0
    env_file:
      - .env
    volumes:
      - .:/app
      - node_modules_cache:/app/node_modules
      - vite_cache:/app/.vite
    command: sh -c "npm ci --prefer-offline && npm run dev -- --host 0.0.0.0 --port 8080"
    depends_on:
      backend:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8080"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 60s
    networks:
      - corner-league-network

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: corner-league-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/conf.d:/etc/nginx/conf.d:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - frontend
      - backend
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    networks:
      - corner-league-network

  # Grafana for Monitoring (Optional)
  grafana:
    image: grafana/grafana:latest
    container_name: corner-league-grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin}
      - GF_USERS_ALLOW_SIGN_UP=false
      - GF_INSTALL_PLUGINS=redis-datasource,postgres-datasource
    volumes:
      - grafana_data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning:ro
    networks:
      - corner-league-network
    profiles:
      - monitoring

  # Prometheus for Metrics (Optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: corner-league-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - corner-league-network
    profiles:
      - monitoring

volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  grafana_data:
    driver: local
  prometheus_data:
    driver: local
  backend_cache:
    driver: local
  node_modules_cache:
    driver: local
  vite_cache:
    driver: local

networks:
  corner-league-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16