[tool:pytest]
# Pytest configuration for Corner League Media backend testing

# Test discovery
testpaths = tests
python_files = test_*.py *_test.py
python_classes = Test*
python_functions = test_*

# Minimum version
minversion = 7.0

# Add options for all test runs
addopts =
    --strict-markers
    --strict-config
    --verbose
    --tb=short
    --maxfail=5
    --durations=10
    --cov=backend
    --cov-report=html:htmlcov
    --cov-report=xml:coverage.xml
    --cov-report=term-missing
    --cov-fail-under=90
    --cov-branch
    --junit-xml=test-results/pytest-report.xml
    --benchmark-disable
    --benchmark-skip

# Markers for test categorization
markers =
    unit: Unit tests that test individual functions/methods
    integration: Integration tests that test multiple components together
    api: API endpoint tests
    database: Tests that require database access
    auth: Authentication/authorization tests
    slow: Tests that take longer than normal to run
    benchmark: Performance benchmark tests
    security: Security-related tests
    smoke: Smoke tests for basic functionality
    regression: Tests for previously found bugs

# Coverage settings
[coverage:run]
source = backend
omit =
    */tests/*
    */venv/*
    */migrations/*
    */scripts/*
    */__pycache__/*
    */conftest.py
    */test_*.py
    */.pytest_cache/*
    */alembic/*
branch = True
parallel = True

[coverage:report]
precision = 2
show_missing = True
skip_covered = False
exclude_lines =
    pragma: no cover
    def __repr__
    raise AssertionError
    raise NotImplementedError
    if __name__ == .__main__.:
    class .*\(Protocol\):
    @(abc\.)?abstractmethod

[coverage:html]
directory = htmlcov
title = Corner League Media Backend Coverage Report

[coverage:xml]
output = coverage.xml