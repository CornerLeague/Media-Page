name: Test Coverage and Quality

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

env:
  NODE_VERSION: '18'
  PYTHON_VERSION: '3.12'

jobs:
  frontend-tests:
    name: Frontend Tests & Coverage
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run type checking
        run: npm run typecheck

      - name: Run linting
        run: npm run lint

      - name: Run unit tests with coverage
        run: npm run test:coverage

      - name: Run accessibility tests
        run: npm run test:accessibility

      - name: Generate coverage report
        run: npm run test:coverage -- --reporter=json --outputFile=coverage/coverage.json

      - name: Upload frontend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./coverage/coverage.json
          flags: frontend
          name: frontend-coverage
          fail_ci_if_error: true

      - name: Comment PR with coverage
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          recreate: true
          path: coverage/coverage-summary.md

  backend-tests:
    name: Backend Tests & Coverage
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: test_corner_league
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'

      - name: Install Python dependencies
        run: |
          cd backend
          pip install -r requirements.txt
          pip install pytest-cov pytest-html pytest-benchmark pytest-xdist

      - name: Setup test database
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_corner_league
        run: |
          cd backend
          python -c "import psycopg2; psycopg2.connect('postgresql://postgres:postgres@localhost:5432/postgres').cursor().execute('CREATE DATABASE test_corner_league')" || true

      - name: Run backend tests with coverage
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_corner_league
          TESTING: true
        run: |
          cd backend
          pytest \
            --cov=backend \
            --cov-report=xml:coverage.xml \
            --cov-report=html:htmlcov \
            --cov-report=term-missing \
            --cov-fail-under=90 \
            --junit-xml=test-results/pytest-report.xml \
            --html=test-results/pytest-report.html \
            --self-contained-html \
            -n auto \
            tests/

      - name: Run performance benchmarks
        env:
          DATABASE_URL: postgresql://postgres:postgres@localhost:5432/test_corner_league
          TESTING: true
        run: |
          cd backend
          pytest \
            --benchmark-only \
            --benchmark-json=test-results/benchmark-report.json \
            tests/test_performance_benchmarks.py

      - name: Upload backend coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ./backend/coverage.xml
          flags: backend
          name: backend-coverage
          fail_ci_if_error: true

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: backend-test-results
          path: |
            backend/test-results/
            backend/htmlcov/

  e2e-tests:
    name: E2E Tests & Accessibility
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Build application
        run: npm run build

      - name: Run E2E tests
        run: npm run test:e2e

      - name: Run accessibility E2E tests
        run: npm run test:e2e:accessibility

      - name: Upload E2E test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: e2e-test-results
          path: |
            test-results/
            playwright-report/

  code-quality:
    name: Code Quality Analysis
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          npm ci
          cd backend && pip install -r requirements.txt

      - name: Run ESLint
        run: npm run lint -- --format=json --output-file=eslint-report.json

      - name: Run Python linting (flake8)
        run: |
          cd backend
          pip install flake8 black isort mypy
          flake8 --format=json --output-file=../flake8-report.json backend/ || true
          black --check --diff backend/
          isort --check-only --diff backend/
          mypy backend/ --ignore-missing-imports || true

      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@master
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}

  security-scan:
    name: Security Scanning
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

      - name: Run npm audit
        run: npm audit --audit-level=moderate

      - name: Run Python safety check
        run: |
          cd backend
          pip install safety
          safety check --json --output safety-report.json || true

  performance-monitoring:
    name: Performance Monitoring
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Install Playwright browsers
        run: npx playwright install --with-deps

      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli@0.12.x
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

      - name: Bundle size analysis
        run: |
          npm run build -- --analyze
          npx bundlesize

  test-summary:
    name: Test Summary
    runs-on: ubuntu-latest
    needs: [frontend-tests, backend-tests, e2e-tests, code-quality, security-scan]
    if: always()

    steps:
      - name: Download all artifacts
        uses: actions/download-artifact@v4

      - name: Generate test summary
        run: |
          echo "# Test Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Coverage Results" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend: See Codecov report" >> $GITHUB_STEP_SUMMARY
          echo "- Backend: See Codecov report" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "## Test Status" >> $GITHUB_STEP_SUMMARY
          echo "- Frontend Tests: ${{ needs.frontend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Backend Tests: ${{ needs.backend-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- E2E Tests: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Code Quality: ${{ needs.code-quality.result }}" >> $GITHUB_STEP_SUMMARY
          echo "- Security Scan: ${{ needs.security-scan.result }}" >> $GITHUB_STEP_SUMMARY

      - name: Comment PR with results
        if: github.event_name == 'pull_request'
        uses: marocchino/sticky-pull-request-comment@v2
        with:
          header: test-summary
          message: |
            ## 🧪 Test Summary

            | Test Suite | Status |
            |------------|--------|
            | Frontend Tests | ${{ needs.frontend-tests.result == 'success' && '✅' || '❌' }} |
            | Backend Tests | ${{ needs.backend-tests.result == 'success' && '✅' || '❌' }} |
            | E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅' || '❌' }} |
            | Code Quality | ${{ needs.code-quality.result == 'success' && '✅' || '❌' }} |
            | Security Scan | ${{ needs.security-scan.result == 'success' && '✅' || '❌' }} |

            📊 Detailed reports available in [Actions tab](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})